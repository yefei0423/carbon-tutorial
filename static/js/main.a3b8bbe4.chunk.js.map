{"version":3,"sources":["components/TutorialHeader/index.js","components/TutorialHeader/TutorialHeader.js","components/Info/Info.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/RepoPage/RepoTable.js","content/RepoPage/RepoPage.js","content/RepoPage/index.js","App.js","serviceWorker.js","index.js"],"names":["TutorialHeader","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","aria-label","SkipToContent","HeaderMenuButton","onClick","isActive","HeaderName","element","Link","to","prefix","HeaderNavigation","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar","HeaderGlobalAction","InfoSection","props","className","heading","children","InfoCard","splitHeading","phrase","splitPhrase","split","thirdWord","pop","join","createArrayFromPhrase","body","icon","selected","role","tabIndex","LandingPage","Breadcrumb","noTrailingSlash","BreadcrumbItem","href","Tabs","Tab","label","Button","src","process","alt","RepoTable","rows","headers","getRowDescription","rowId","row","find","id","description","DataTable","getHeaderProps","getRowProps","getTableProps","TableContainer","title","Table","TableHead","TableRow","TableExpandHeader","map","header","TableHeader","TableBody","Fragment","key","TableExpandRow","cells","cell","TableCell","value","TableExpandedRow","colSpan","length","REPO_QUERY","gql","LinkList","url","homepageUrl","style","display","RepoPage","useState","totalItems","setTotalItems","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","query","loading","error","organization","data","DataTableSkeleton","columnCount","rowCount","message","repositories","totalCount","stars","stargazers","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","getRowItems","nodes","slice","Pagination","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","onChange","page","App","Content","exact","path","component","Component","Boolean","window","location","hostname","match","client","ApolloClient","uri","authorization","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3b8bbe4.chunk.js","sourcesContent":["import TutorialHeader from './TutorialHeader';\r\nexport default TutorialHeader;\r\n","import React from 'react';\r\nimport {\r\n  Header,\r\n  HeaderContainer,\r\n  HeaderName,\r\n  HeaderNavigation,\r\n  HeaderMenuButton,\r\n  HeaderMenuItem,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SkipToContent,\r\n  SideNav,\r\n  SideNavItems,\r\n  HeaderSideNavItems,\r\n} from 'carbon-components-react';\r\nimport {\r\n  AppSwitcher20,\r\n  Notification20,\r\n  UserAvatar20,\r\n} from '@carbon/icons-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TutorialHeader = () => (\r\n  <HeaderContainer\r\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\r\n      <Header aria-label=\"Carbon Tutorial\">\r\n        <SkipToContent />\r\n        <HeaderMenuButton\r\n          aria-label=\"Open menu\"\r\n          onClick={onClickSideNavExpand}\r\n          isActive={isSideNavExpanded}\r\n        />\r\n        <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\r\n          Carbon Tutorial\r\n        </HeaderName>\r\n        <HeaderNavigation aria-label=\"Carbon Tutorial\">\r\n          <HeaderMenuItem element={Link} to=\"/repos\">\r\n            Repositories\r\n          </HeaderMenuItem>\r\n        </HeaderNavigation>\r\n        <SideNav\r\n          aria-label=\"Side navigation\"\r\n          expanded={isSideNavExpanded}\r\n          isPersistent={false}>\r\n          <SideNavItems>\r\n            <HeaderSideNavItems>\r\n              <HeaderMenuItem element={Link} to=\"/repos\">\r\n                Repositories\r\n              </HeaderMenuItem>\r\n            </HeaderSideNavItems>\r\n          </SideNavItems>\r\n        </SideNav>\r\n        <HeaderGlobalBar>\r\n          <HeaderGlobalAction aria-label=\"Notifications\">\r\n            <Notification20 />\r\n          </HeaderGlobalAction>\r\n          <HeaderGlobalAction aria-label=\"User Avatar\">\r\n            <UserAvatar20 />\r\n          </HeaderGlobalAction>\r\n          <HeaderGlobalAction aria-label=\"App Switcher\">\r\n            <AppSwitcher20 />\r\n          </HeaderGlobalAction>\r\n        </HeaderGlobalBar>\r\n      </Header>\r\n    )}\r\n  />\r\n);\r\n\r\nexport default TutorialHeader;\r\n","import React from 'react';\r\n\r\n// Take in a phrase and separate the third word in an array\r\nfunction createArrayFromPhrase(phrase) {\r\n  const splitPhrase = phrase.split(' ');\r\n  const thirdWord = splitPhrase.pop();\r\n  return [splitPhrase.join(' '), thirdWord];\r\n}\r\n\r\nconst InfoSection = props => (\r\n  <section className={`bx--row ${props.className} info-section`}>\r\n    <div className=\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\">\r\n      <h3 className=\"info-section__heading\">{props.heading}</h3>\r\n    </div>\r\n    {props.children}\r\n  </section>\r\n);\r\n\r\nconst InfoCard = props => {\r\n  const splitHeading = createArrayFromPhrase(props.heading);\r\n\r\n  return (\r\n    <div className=\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\">\r\n      <h4 className=\"info-card__heading\">\r\n        {`${splitHeading[0]} `}\r\n        <strong>{splitHeading[1]}</strong>\r\n      </h4>\r\n      <p className=\"info-card__body\">{props.body}</p>\r\n      {props.icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { InfoSection, InfoCard };\r\n","import React from 'react';\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n} from 'carbon-components-react';\r\nimport { InfoSection, InfoCard } from '../../components/Info';\r\nimport Globe32 from '@carbon/icons-react/lib/globe/32';\r\nimport PersonFavorite32 from '@carbon/icons-react/lib/person--favorite/32';\r\nimport Application32 from '@carbon/icons-react/lib/application/32';\r\n\r\nconst props = {\r\n  tabs: {\r\n    selected: 0,\r\n    role: 'navigation',\r\n  },\r\n  tab: {\r\n    role: 'presentation',\r\n    tabIndex: 0,\r\n  },\r\n};\r\n\r\nconst LandingPage = () => {\r\n  return (\r\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\r\n      <div className=\"bx--row landing-page__banner\">\r\n        <div className=\"bx--col-lg-16\">\r\n          <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\r\n            <BreadcrumbItem>\r\n              <a href=\"/\">Getting started</a>\r\n            </BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <h1 className=\"landing-page__heading\">\r\n            Design &amp; build with Carbon\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"bx--row landing-page__r2\">\r\n        <div className=\"bx--col bx--no-gutter\">\r\n          <Tabs {...props.tabs} aria-label=\"Tab navigation\">\r\n            <Tab {...props.tab} label=\"About\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\r\n                    <h2 className=\"landing-page__subheading\">\r\n                      What is Carbon?\r\n                    </h2>\r\n                    <p className=\"landing-page__p\">\r\n                      Carbon is IBM’s open-source design system for digital\r\n                      products and experiences. With the IBM Design Language as\r\n                      its foundation, the system consists of working code,\r\n                      design tools and resources, human interface guidelines,\r\n                      and a vibrant community of contributors.\r\n                    </p>\r\n                    <Button>Learn more</Button>\r\n                  </div>\r\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\r\n                    <img\r\n                      className=\"landing-page__illo\"\r\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\r\n                      alt=\"Carbon illustration\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab {...props.tab} label=\"Design\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-lg-16\">\r\n                    Rapidly build beautiful and accessible experiences. The\r\n                    Carbon kit contains all resources you need to get started.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab {...props.tab} label=\"Develop\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-lg-16\">\r\n                    Carbon provides styles and components in Vanilla, React,\r\n                    Angular, and Vue for anyone building on the web.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n      <InfoSection heading=\"The Principles\" className=\"landing-page__r3\">\r\n        <InfoCard\r\n          heading=\"Carbon is Open\"\r\n          body=\"It's a distributed effort, guided by the principles of the open-source movement. Carbon's users are also it's makers, and everyone is encouraged to contribute.\"\r\n          icon={<PersonFavorite32 />}\r\n        />\r\n        <InfoCard\r\n          heading=\"Carbon is Modular\"\r\n          body=\"Carbon's modularity ensures maximum flexibility in execution. It's components are designed to work seamlessly with each other, in whichever combination suits the needs of the user.\"\r\n          icon={<Application32 />}\r\n        />\r\n        <InfoCard\r\n          heading=\"Carbon is Consistent\"\r\n          body=\"Based on the comprehensive IBM Design Language, every element and component of Carbon was designed from the ground up to work elegantly together to ensure consistent, cohesive user experiences.\"\r\n          icon={<Globe32 />}\r\n        />\r\n      </InfoSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import LandingPage from './LandingPage';\r\nexport default LandingPage;\r\n","import React from 'react';\r\nimport {\r\n  DataTable,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableExpandHeader,\r\n  TableHeader,\r\n  TableBody,\r\n  TableExpandRow,\r\n  TableCell,\r\n  TableExpandedRow,\r\n} from 'carbon-components-react';\r\n\r\nconst RepoTable = ({ rows, headers }) => {\r\n  const getRowDescription = rowId => {\r\n    const row = rows.find(({ id }) => id === rowId);\r\n    return row ? row.description : '';\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      rows={rows}\r\n      headers={headers}\r\n      render={({\r\n        rows,\r\n        headers,\r\n        getHeaderProps,\r\n        getRowProps,\r\n        getTableProps,\r\n      }) => (\r\n        <TableContainer\r\n          title=\"Carbon Repositories\"\r\n          description=\"A collection of public Carbon repositories.\">\r\n          <Table {...getTableProps()}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableExpandHeader />\r\n                {headers.map(header => (\r\n                  <TableHeader {...getHeaderProps({ header })}>\r\n                    {header.header}\r\n                  </TableHeader>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map(row => (\r\n                <React.Fragment key={row.id}>\r\n                  <TableExpandRow {...getRowProps({ row })}>\r\n                    {row.cells.map(cell => (\r\n                      <TableCell key={cell.id}>{cell.value}</TableCell>\r\n                    ))}\r\n                  </TableExpandRow>\r\n                  <TableExpandedRow colSpan={headers.length + 1}>\r\n                    <p>{getRowDescription(row.id)}</p>\r\n                  </TableExpandedRow>\r\n                </React.Fragment>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RepoTable;\r\n","import React, { useState } from 'react';\r\nimport RepoTable from './RepoTable';\r\nimport { gql } from 'apollo-boost';\r\nimport { Query } from 'react-apollo';\r\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\r\n\r\nconst REPO_QUERY = gql`\r\n  query REPO_QUERY {\r\n    # Let's use carbon as our organization\r\n    organization(login: \"carbon-design-system\") {\r\n      # We'll grab all the repositories in one go. To load more resources\r\n      # continuously, see the advanced topics.\r\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\r\n        totalCount\r\n        nodes {\r\n          url\r\n          homepageUrl\r\n          issues(filterBy: { states: OPEN }) {\r\n            totalCount\r\n          }\r\n          stargazers {\r\n            totalCount\r\n          }\r\n          releases(first: 1) {\r\n            totalCount\r\n            nodes {\r\n              name\r\n            }\r\n          }\r\n          name\r\n          updatedAt\r\n          createdAt\r\n          description\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst headers = [\r\n  {\r\n    key: 'name',\r\n    header: 'Name',\r\n  },\r\n  {\r\n    key: 'createdAt',\r\n    header: 'Created',\r\n  },\r\n  {\r\n    key: 'updatedAt',\r\n    header: 'Updated',\r\n  },\r\n  {\r\n    key: 'issueCount',\r\n    header: 'Open Issues',\r\n  },\r\n  {\r\n    key: 'stars',\r\n    header: 'Stars',\r\n  },\r\n  {\r\n    key: 'links',\r\n    header: 'Links',\r\n  },\r\n];\r\n\r\nconst LinkList = ({ url, homepageUrl }) => (\r\n  <ul style={{ display: 'flex' }}>\r\n    <li>\r\n      <Link href={url}>GitHub</Link>\r\n    </li>\r\n    {homepageUrl && (\r\n      <li>\r\n        <span>&nbsp;|&nbsp;</span>\r\n        <Link href={homepageUrl}>Homepage</Link>\r\n      </li>\r\n    )}\r\n  </ul>\r\n);\r\n\r\nconst getRowItems = rows =>\r\n  rows.map(row => ({\r\n    ...row,\r\n    key: row.id,\r\n    stars: row.stargazers.totalCount,\r\n    issueCount: row.issues.totalCount,\r\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\r\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\r\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\r\n  }));\r\n\r\nconst RepoPage = () => {\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\r\n  const [currentPageSize, setCurrentPageSize] = useState(10);\r\n\r\n  return (\r\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\r\n      <div className=\"bx--row repo-page__r1\">\r\n        <div className=\"bx--col-lg-16\">\r\n          <Query query={REPO_QUERY}>\r\n            {({ loading, error, data: { organization } }) => {\r\n              // Wait for the request to complete\r\n              if (loading)\r\n                return (\r\n                  <DataTableSkeleton\r\n                    columnCount={headers.length + 1}\r\n                    rowCount={10}\r\n                    headers={headers}\r\n                  />\r\n                );\r\n\r\n              // Something went wrong with the data fetching\r\n              if (error) return `Error! ${error.message}`;\r\n\r\n              // If we're here, we've got our data!\r\n              const { repositories } = organization;\r\n              setTotalItems(repositories.totalCount);\r\n              const rows = getRowItems(repositories.nodes);\r\n\r\n              return (\r\n                <>\r\n                  <RepoTable\r\n                    headers={headers}\r\n                    rows={rows.slice(\r\n                      firstRowIndex,\r\n                      firstRowIndex + currentPageSize\r\n                    )}\r\n                  />\r\n                  <Pagination\r\n                    totalItems={totalItems}\r\n                    backwardText=\"Previous page\"\r\n                    forwardText=\"Next page\"\r\n                    pageSize={currentPageSize}\r\n                    pageSizes={[5, 10, 15, 25]}\r\n                    itemsPerPageText=\"Items per page\"\r\n                    onChange={({ page, pageSize }) => {\r\n                      if (pageSize !== currentPageSize) {\r\n                        setCurrentPageSize(pageSize);\r\n                      }\r\n                      setFirstRowIndex(pageSize * (page - 1));\r\n                    }}\r\n                  />\r\n                </>\r\n              );\r\n            }}\r\n          </Query>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoPage;\r\n","import RepoPage from './RepoPage';\r\nexport default RepoPage;\r\n","import React, { Component } from 'react';\r\nimport './app.scss';\r\nimport { Content } from 'carbon-components-react';\r\nimport TutorialHeader from './components/TutorialHeader';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport LandingPage from './content/LandingPage';\r\nimport RepoPage from './content/RepoPage';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TutorialHeader />\r\n        <Content>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={LandingPage} />\r\n            <Route path=\"/repos\" component={RepoPage} />\r\n          </Switch>\r\n        </Content>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'core-js/modules/es7.array.includes';\r\nimport 'core-js/modules/es6.array.fill';\r\nimport 'core-js/modules/es6.string.includes';\r\nimport 'core-js/modules/es6.string.trim';\r\nimport 'core-js/modules/es7.object.values';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.github.com/graphql',\r\n  headers: {\r\n    authorization: `Bearer ${\r\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\r\n    }`,\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}